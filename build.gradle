import org.gradle.internal.os.OperatingSystem

group 'coffeecatteam.theultimatetile'
version '0.6-alpha-pre5'

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'edu.sc.seis.launch4j'

sourceCompatibility = 1.8

def mainClassPath = 'coffeecatteam.theultimatetile.start.TutLauncher'
def exeJarName = rootProject.name + "-" + version
def buildPath = "build/" + version
buildDir = file(buildPath)

project.ext.lwjglVersion = "3.2.2"
project.ext.jomlVersion = "1.9.15"

switch (OperatingSystem.current()) {
	case OperatingSystem.LINUX:
		def osArch = System.getProperty("os.arch")
		project.ext.lwjglNatives = osArch.startsWith("arm") || osArch.startsWith("aarch64")
			? "natives-linux-${osArch.contains("64") || osArch.startsWith("armv8") ? "arm64" : "arm32"}"
			: "natives-linux"
		break
	case OperatingSystem.MAC_OS:
		project.ext.lwjglNatives = "natives-macos"
		break
	case OperatingSystem.WINDOWS:
		project.ext.lwjglNatives = "natives-windows"
		break
}

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'edu.sc.seis.gradle:launch4j:2.4.4'
    }
}

repositories {
    mavenCentral()
    jcenter()
    maven {
        url 'https://jitpack.io'
    }
    maven {
        url "https://libraries.minecraft.net"
    }
    maven { url "http://b2s-repo.googlecode.com/svn/trunk/mvn-repo" }
    maven { url "http://java.freehep.org/maven2" }
    maven { url "http://download.java.net/maven/2" }
    maven { url "http://maven.fabricmc.net"}
    maven { url "http://repo.fusesource.com/nexus/content/repositories/releases-3rd-party/" }
}

launch4j {
    outfile = exeJarName + ".exe"
    println("Generating exe file: " + outfile)
    outputDir = "libs"
    companyName = "CoffeeCatTeam"
    mainClassName = mainClassPath
    icon = "${projectDir}/icon.ico"
}

configurations {
    embed
    compile.extendsFrom(embed)
}

dependencies {
    compile 'club.minnced:java-discord-rpc:2.0.1'
    compile 'com.googlecode.json-simple:json-simple:1.1.1'

    implementation 'com.github.CoffeeCatRailway:CoffeeCatUtils:master-SNAPSHOT'
    compile "net.fabricmc:fabric-loader:0.4.8+build.155"
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.5'
    compile group: 'com.google.common', name: 'google-collect', version: '1.0'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.9'
    compile group: 'com.google.guava', name: 'guava', version: '28.0-jre'
    compile group: 'it.unimi.dsi', name: 'fastutil', version: '8.2.3'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.11.2'
    compile group: 'commons-io', name: 'commons-io', version: '2.6'
    compile 'com.mojang:brigadier:1.0.17'
    compile 'com.mojang:javabridge:1.0.22'
    compile 'com.mojang:datafixerupper:2.0.24'
    compile 'com.ibm.icu:icu4j-core-mojang:51.2'
    compile 'com.mojang:text2speech:1.11.3'
    compile 'com.mojang:authlib:1.5.25'
    compile 'oshi-project:oshi-core:1.1'
    compile group: 'io.netty', name: 'netty-all', version: '5.0.0.Alpha2'

    implementation "org.lwjgl:lwjgl:$lwjglVersion"
    implementation "org.lwjgl:lwjgl-bgfx:$lwjglVersion"
    implementation "org.lwjgl:lwjgl-cuda:$lwjglVersion"
    implementation "org.lwjgl:lwjgl-egl:$lwjglVersion"
    implementation "org.lwjgl:lwjgl-glfw:$lwjglVersion"
    implementation "org.lwjgl:lwjgl-jawt:$lwjglVersion"
    implementation "org.lwjgl:lwjgl-nanovg:$lwjglVersion"
    implementation "org.lwjgl:lwjgl-nuklear:$lwjglVersion"
    implementation "org.lwjgl:lwjgl-openal:$lwjglVersion"
    implementation "org.lwjgl:lwjgl-opencl:$lwjglVersion"
    implementation "org.lwjgl:lwjgl-opengl:$lwjglVersion"
    implementation "org.lwjgl:lwjgl-opengles:$lwjglVersion"
    implementation "org.lwjgl:lwjgl-openvr:$lwjglVersion"
    implementation "org.lwjgl:lwjgl-vulkan:$lwjglVersion"
    implementation "org.lwjgl:lwjgl-stb:$lwjglVersion"
    runtimeOnly "org.lwjgl:lwjgl:$lwjglVersion:$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-bgfx:$lwjglVersion:$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-glfw:$lwjglVersion:$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-nanovg:$lwjglVersion:$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-nuklear:$lwjglVersion:$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-openal:$lwjglVersion:$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-opengl:$lwjglVersion:$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-opengles:$lwjglVersion:$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-openvr:$lwjglVersion:$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-stb:$lwjglVersion:$lwjglNatives"
    if (lwjglNatives == "natives-macos") runtimeOnly "org.lwjgl:lwjgl-vulkan:$lwjglVersion:$lwjglNatives"

    testCompile group: 'junit', name: 'junit', version: '4.12'
    implementation "org.joml:joml:${jomlVersion}"
    compile group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2'
}

jar {
    from configurations.compile.collect { zipTree it }
    manifest {
        attributes 'Main-Class': mainClassPath
    }
    exclude("META-INF/*.RSA", "META-INF/*.SF")
}

task copyOptions(type: Copy) {
    println("Copying options.json, saves folder & etc. to " + buildPath + "/libs")
    copy {
        from "data/options.json"
        copy {
            from "data/LICENSE.md"
            from "data/README.txt"
            into buildPath + "/libs"
        }
        copy {
            from  fileTree(dir: "data/icons", include: "*.png")
            into buildPath + "/libs/data/icons"
        }
        copy {
            from "data/saves/saved_games.json"
            into buildPath + "/libs/data/saves"
        }
        into buildPath + "/libs/data"
    }
}
