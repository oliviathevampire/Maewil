import org.gradle.internal.os.OperatingSystem

group 'io.github.vampirestudios.tdg'
version '0.1.0-indev'

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'edu.sc.seis.launch4j'

sourceCompatibility = 1.8

def mainClassPath = 'io.github.vampirestudios.tdg.start.TutLauncher'
def exeJarName = rootProject.name + "-" + version
def buildPath = "build/" + version
buildDir = file(buildPath)

project.ext.lwjglVersion = "3.2.2"
project.ext.jomlVersion = "1.9.15"

switch (OperatingSystem.current()) {
	case OperatingSystem.LINUX:
		def osArch = System.getProperty("os.arch")
		project.ext.lwjglNatives = osArch.startsWith("arm") || osArch.startsWith("aarch64")
			? "natives-linux-${osArch.contains("64") || osArch.startsWith("armv8") ? "arm64" : "arm32"}"
			: "natives-linux"
		break
	case OperatingSystem.MAC_OS:
		project.ext.lwjglNatives = "natives-macos"
		break
	case OperatingSystem.WINDOWS:
		project.ext.lwjglNatives = "natives-windows"
		break
}

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'edu.sc.seis.gradle:launch4j:2.4.4'
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    google()
    maven {
        url 'https://jitpack.io'
    }
    maven { url "http://b2s-repo.googlecode.com/svn/trunk/mvn-repo" }
    maven { url "http://java.freehep.org/maven2" }
    maven { url "http://download.java.net/maven/2" }
    maven { url "http://maven.fabricmc.net"}
    maven { url "http://repo.fusesource.com/nexus/content/repositories/releases-3rd-party/" }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    maven { url "https://oss.sonatype.org/content/repositories/releases/" }
    maven { url "https://raw.github.com/SpinyOwl/repo/releases" }
    maven { url "https://raw.github.com/SpinyOwl/repo/snapshots" }
}

launch4j {
    outfile = exeJarName + ".exe"
    println("Generating exe file: " + outfile)
    outputDir = "libs"
    companyName = "CoffeeCatTeam"
    mainClassName = mainClassPath
    icon = "${projectDir}/icon.ico"
}

configurations {
    embed
    compile.extendsFrom(embed)
}

dependencies {
    compile 'club.minnced:java-discord-rpc:2.0.1'
    compile 'com.googlecode.json-simple:json-simple:1.1.1'
    compile 'org.slick2d:slick2d-core:1.0.2'
    implementation "org.apache.logging.log4j:log4j-core:2.8.1"

    compile 'com.github.CoffeeCatRailway:CoffeeCatUtils:master-SNAPSHOT'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.5'
    compile group: 'com.google.common', name: 'google-collect', version: '1.0'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.9'

//    compile "org.liquidengine:legui:2.2.0-SNAPSHOT"
//    compile "org.liquidengine:leutil:1.0.0"
//    compile "org.liquidengine:cbchain:1.0.0"

//    compile "com.badlogicgames.gdx:gdx:${project.gdxVersion}"
//    compile "com.badlogicgames.gdx:gdx-box2d:${project.gdxVersion}"
//    compile "com.badlogicgames.gdx:gdx-controllers:${project.gdxVersion}"
//    compile "com.badlogicgames.gdx:gdx-freetype:${project.gdxVersion}"
//    compile "com.badlogicgames.gdx:gdx-bullet:${project.gdxVersion}"
//    compile "com.badlogicgames.box2dlights:box2dlights:${project.box2DLightsVersion}"
//    compile "com.badlogicgames.gdx:gdx-ai:${project.aiVersion}"
//    compile "com.badlogicgames.ashley:ashley:${project.ashleyVersion}"
//    compile "com.esotericsoftware.spine:spine-libgdx:3.6.53.1"
//    compile "com.underwaterapps.overlap2druntime:overlap2d-runtime-libgdx:0.1.0"
//    compile "net.dermetfan.libgdx-utils:libgdx-utils:0.13.4"
//    compile "net.dermetfan.libgdx-utils:libgdx-utils-box2d:0.13.4"
//
//    compile "com.badlogicgames.gdx:gdx-backend-lwjgl3:${project.gdxVersion}"
//    compile "com.badlogicgames.gdx:gdx-platform:${project.gdxVersion}:natives-desktop"
//    compile "com.badlogicgames.gdx:gdx-box2d-platform:${project.gdxVersion}:natives-desktop"
//    compile "com.badlogicgames.gdx:gdx-controllers-desktop:${project.gdxVersion}"
//    compile "com.badlogicgames.gdx:gdx-controllers-platform:${project.gdxVersion}:natives-desktop"
//    compile "com.badlogicgames.gdx:gdx-tools:${project.gdxVersion}"
//    compile "com.badlogicgames.gdx:gdx-freetype-platform:${project.gdxVersion}:natives-desktop"
//    compile "com.badlogicgames.gdx:gdx-bullet-platform:${project.gdxVersion}:natives-desktop"

    compile "org.mini2Dx:mini2Dx-core:${project.mini2DxVersion}"
    compile "org.mini2Dx:mini2Dx-tiled:${project.mini2DxVersion}"
    compile "org.mini2Dx:mini2Dx-artemis-odb:${project.mini2DxVersion}"
    compile "org.mini2Dx:mini2Dx-ui:${project.mini2DxVersion}"
    compile "org.mini2Dx:mini2Dx-core:${project.minibusVersion}"
    compile "org.mini2Dx:miniscript-lua:${project.miniscriptVersion}"
    compile "com.badlogicgames.gdx:gdx-ai:${project.aiVersion}"
    compile "com.badlogicgames.gdx:gdx-bullet:${project.gdxVersion}"
    compile "org.mini2Dx:miniscript-groovy:${project.miniscriptVersion}"
    compile "org.mini2Dx:miniscript-python:${project.miniscriptVersion}"
    compile "com.badlogicgames.gdx:gdx-box2d:${project.gdxVersion}"
    compile "org.mini2Dx:miniscript-ruby:${project.miniscriptVersion}"
    compile "com.badlogicgames.box2dlights:box2dlights:${project.box2DLightsVersion}"
    compile "net.dermetfan.libgdx-utils:libgdx-utils:0.13.3"
    compile "net.dermetfan.libgdx-utils:libgdx-utils-box2d:0.13.3"
    compile "org.mini2Dx:mini2Dx-desktop:$mini2DxVersion"

    // Netty
    compile group: 'io.netty', name: 'netty-all', version: '4.1.29.Final'

    testCompile group: 'junit', name: 'junit', version: '4.12'
    implementation "org.joml:joml:${project.jomlVersion}"
}

task copyOptions(type: Copy) {
    println("Copying options.json, saves folder & etc. to " + buildPath + "/libs")
    copy {
        from "data/options.json"
        copy {
            from "data/LICENSE.md"
            from "data/README.txt"
            into buildPath + "/libs"
        }
        copy {
            from fileTree(dir: "data/icons", include: "*.png")
            into buildPath + "/libs/data/icons"
        }
        copy {
            from "data/saves/saved_games.json"
            into buildPath + "/libs/data/saves"
        }
        copy {
            from fileTree(dir: "libs/natives", include: "*.dll")
            from fileTree(dir: "libs/natives", include: "*.so")
            from fileTree(dir: "libs/natives", include: "*.dylib")
            into buildPath + "/libs/data/natives"
        }
        into buildPath + "/libs/data"
    }
}
